/*
#
#    Copyright 2009, Benedikt Heinz, Zn000h@googlemail.com
#    based on GnuPG SHA1 implementation
#
#    This file is part of Pyrit.
#
#    Pyrit is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Pyrit is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Pyrit.  If not, see <http://www.gnu.org/licenses/>.
*/

#define rol(x,n,l) ( ((x) << (n)) | ((x) >> (l)) )

#define K_1  0x5A827999U
#define K_2  0x6ED9EBA1U
#define K_3  0x8F1BBCDCU
#define K_4  0xCA62C1D6U
#define F1(x,y,z)   ( z ^ ( x & ( y ^ z ) ) )
#define F2(x,y,z)   ( x ^ y ^ z )
#define F3(x,y,z)   ( ( x & y ) | ( z & ( x | y ) ) )
#define F4(x,y,z)   ( x ^ y ^ z )

#define M(i) (W[i&0x0f] = (( tm =   W[i&0x0f] ^ W[(i-14)&0x0f] ^ W[(i-8)&0x0f] ^ W[(i-3)&0x0f] )<< s_1) | (tm >> s_31 ))

#define R(a,b,c,d,e,f,k,m)  e += rol( a, s_5, s_27 )     \
				      + f( b, c, d )  \
				      + k	      \
				      + m;	      \
				 b = rol( b, s_30, s_2 )

#define SWAP(a)	( ((a)>>s_24) | (((a)&m_1)>>s_8) | (((a)&m_2)<<s_8) | ((a)<<s_24) )
#define ENDIAN(a) SWAP(a)

kernel void
sha1_rounds (uint2 ipad_A <>, uint2 ipad_B <>, uint2 ipad_C <>,
	     uint2 ipad_D <>, uint2 ipad_E <>, uint2 opad_A <>,
	     uint2 opad_B <>, uint2 opad_C <>, uint2 opad_D <>,
	     uint2 opad_E <>, uint2 pmk_in0 <>, uint2 pmk_in1 <>,
	     uint2 pmk_in2 <>, uint2 pmk_in3 <>, uint2 pmk_in4 <>,
	     uint2 W5_init, out uint2 pmk_out0 <>, out uint2 pmk_out1 <>,
	     out uint2 pmk_out2 <>, out uint2 pmk_out3 <>,
	     out uint2 pmk_out4 <>)
{
  uint2 a, b, c, d, e, tm;
  uint cnt;
  uint2 pmk0, pmk1, pmk2, pmk3, pmk4;
  uint2 K1, K2, K3, K4;
  uint2 s_1, s_31, s_5, s_27, s_30, s_2, s_8, s_24, m_1, m_2;
  uint2 W_0, W_1, W_2, W_3, W_4, W_5, W_6, W_7, W_8, W_9, W_10, W_11, W_12,
    W_13, W_14, W_15;

  s_1 = uint2 (1U, 1U);
  s_31 = uint2 (31U, 31U);
  s_5 = uint2 (5U, 5U);
  s_27 = uint2 (27U, 27U);
  s_30 = uint2 (30U, 30U);
  s_2 = uint2 (2U, 2U);
  s_8 = uint2 (8U, 8U);
  s_24 = uint2 (24U, 24U);

  m_1 = uint2 (0x00ff0000U, 0x00ff0000U);
  m_2 = uint2 (0x0000ff00U, 0x0000ff00U);

  K1 = uint2 (K_1, K_1);
  K2 = uint2 (K_2, K_2);
  K3 = uint2 (K_3, K_3);
  K4 = uint2 (K_4, K_4);

  W[0] = pmk0 = ENDIAN (pmk_in0);
  W[1] = pmk1 = ENDIAN (pmk_in1);
  W[2] = pmk2 = ENDIAN (pmk_in2);
  W[3] = pmk3 = ENDIAN (pmk_in3);
  W[4] = pmk4 = ENDIAN (pmk_in4);

  for (cnt = 0U; cnt < 4095U; cnt++)
    {

      W[5] = W5_init;
      W[6] = W[7] = W[8] = W[9] = W[10] = W[11] = W[12] = W[13] = W[14] =
	uint2 (0U, 0U);
      W[15] = uint2 ((64U + 20U) * 8U, (64U + 20U) * 8U);

      a = ipad_A;
      b = ipad_B;
      c = ipad_C;
      d = ipad_D;
      e = ipad_E;

      R (a, b, c, d, e, F1, K1, W[0]);
      R (e, a, b, c, d, F1, K1, W[1]);
      R (d, e, a, b, c, F1, K1, W[2]);
      R (c, d, e, a, b, F1, K1, W[3]);
      R (b, c, d, e, a, F1, K1, W[4]);
      R (a, b, c, d, e, F1, K1, W[5]);
      R (e, a, b, c, d, F1, K1, W[6]);
      R (d, e, a, b, c, F1, K1, W[7]);
      R (c, d, e, a, b, F1, K1, W[8]);
      R (b, c, d, e, a, F1, K1, W[9]);
      R (a, b, c, d, e, F1, K1, W[10]);
      R (e, a, b, c, d, F1, K1, W[11]);
      R (d, e, a, b, c, F1, K1, W[12]);
      R (c, d, e, a, b, F1, K1, W[13]);
      R (b, c, d, e, a, F1, K1, W[14]);
      R (a, b, c, d, e, F1, K1, W[15]);
      R (e, a, b, c, d, F1, K1, M (16));
      R (d, e, a, b, c, F1, K1, M (17));
      R (c, d, e, a, b, F1, K1, M (18));
      R (b, c, d, e, a, F1, K1, M (19));
      R (a, b, c, d, e, F2, K2, M (20));
      R (e, a, b, c, d, F2, K2, M (21));
      R (d, e, a, b, c, F2, K2, M (22));
      R (c, d, e, a, b, F2, K2, M (23));
      R (b, c, d, e, a, F2, K2, M (24));
      R (a, b, c, d, e, F2, K2, M (25));
      R (e, a, b, c, d, F2, K2, M (26));
      R (d, e, a, b, c, F2, K2, M (27));
      R (c, d, e, a, b, F2, K2, M (28));
      R (b, c, d, e, a, F2, K2, M (29));
      R (a, b, c, d, e, F2, K2, M (30));
      R (e, a, b, c, d, F2, K2, M (31));
      R (d, e, a, b, c, F2, K2, M (32));
      R (c, d, e, a, b, F2, K2, M (33));
      R (b, c, d, e, a, F2, K2, M (34));
      R (a, b, c, d, e, F2, K2, M (35));
      R (e, a, b, c, d, F2, K2, M (36));
      R (d, e, a, b, c, F2, K2, M (37));
      R (c, d, e, a, b, F2, K2, M (38));
      R (b, c, d, e, a, F2, K2, M (39));
      R (a, b, c, d, e, F3, K3, M (40));
      R (e, a, b, c, d, F3, K3, M (41));
      R (d, e, a, b, c, F3, K3, M (42));
      R (c, d, e, a, b, F3, K3, M (43));
      R (b, c, d, e, a, F3, K3, M (44));
      R (a, b, c, d, e, F3, K3, M (45));
      R (e, a, b, c, d, F3, K3, M (46));
      R (d, e, a, b, c, F3, K3, M (47));
      R (c, d, e, a, b, F3, K3, M (48));
      R (b, c, d, e, a, F3, K3, M (49));
      R (a, b, c, d, e, F3, K3, M (50));
      R (e, a, b, c, d, F3, K3, M (51));
      R (d, e, a, b, c, F3, K3, M (52));
      R (c, d, e, a, b, F3, K3, M (53));
      R (b, c, d, e, a, F3, K3, M (54));
      R (a, b, c, d, e, F3, K3, M (55));
      R (e, a, b, c, d, F3, K3, M (56));
      R (d, e, a, b, c, F3, K3, M (57));
      R (c, d, e, a, b, F3, K3, M (58));
      R (b, c, d, e, a, F3, K3, M (59));
      R (a, b, c, d, e, F4, K4, M (60));
      R (e, a, b, c, d, F4, K4, M (61));
      R (d, e, a, b, c, F4, K4, M (62));
      R (c, d, e, a, b, F4, K4, M (63));
      R (b, c, d, e, a, F4, K4, M (64));
      R (a, b, c, d, e, F4, K4, M (65));
      R (e, a, b, c, d, F4, K4, M (66));
      R (d, e, a, b, c, F4, K4, M (67));
      R (c, d, e, a, b, F4, K4, M (68));
      R (b, c, d, e, a, F4, K4, M (69));
      R (a, b, c, d, e, F4, K4, M (70));
      R (e, a, b, c, d, F4, K4, M (71));
      R (d, e, a, b, c, F4, K4, M (72));
      R (c, d, e, a, b, F4, K4, M (73));
      R (b, c, d, e, a, F4, K4, M (74));
      R (a, b, c, d, e, F4, K4, M (75));
      R (e, a, b, c, d, F4, K4, M (76));
      R (d, e, a, b, c, F4, K4, M (77));
      R (c, d, e, a, b, F4, K4, M (78));
      R (b, c, d, e, a, F4, K4, M (79));

      W[0] = ipad_A + a;
      W[1] = ipad_B + b;
      W[2] = ipad_C + c;
      W[3] = ipad_D + d;
      W[4] = ipad_E + e;

      W[5] = W5_init;
      W[6] = W[7] = W[8] = W[9] = W[10] = W[11] = W[12] = W[13] = W[14] =
	uint2 (0U, 0U);
      W[15] = uint2 ((64U + 20U) * 8U, (64U + 20U) * 8U);

      a = opad_A;
      b = opad_B;
      c = opad_C;
      d = opad_D;
      e = opad_E;

      R (a, b, c, d, e, F1, K1, W[0]);
      R (e, a, b, c, d, F1, K1, W[1]);
      R (d, e, a, b, c, F1, K1, W[2]);
      R (c, d, e, a, b, F1, K1, W[3]);
      R (b, c, d, e, a, F1, K1, W[4]);
      R (a, b, c, d, e, F1, K1, W[5]);
      R (e, a, b, c, d, F1, K1, W[6]);
      R (d, e, a, b, c, F1, K1, W[7]);
      R (c, d, e, a, b, F1, K1, W[8]);
      R (b, c, d, e, a, F1, K1, W[9]);
      R (a, b, c, d, e, F1, K1, W[10]);
      R (e, a, b, c, d, F1, K1, W[11]);
      R (d, e, a, b, c, F1, K1, W[12]);
      R (c, d, e, a, b, F1, K1, W[13]);
      R (b, c, d, e, a, F1, K1, W[14]);
      R (a, b, c, d, e, F1, K1, W[15]);
      R (e, a, b, c, d, F1, K1, M (16));
      R (d, e, a, b, c, F1, K1, M (17));
      R (c, d, e, a, b, F1, K1, M (18));
      R (b, c, d, e, a, F1, K1, M (19));
      R (a, b, c, d, e, F2, K2, M (20));
      R (e, a, b, c, d, F2, K2, M (21));
      R (d, e, a, b, c, F2, K2, M (22));
      R (c, d, e, a, b, F2, K2, M (23));
      R (b, c, d, e, a, F2, K2, M (24));
      R (a, b, c, d, e, F2, K2, M (25));
      R (e, a, b, c, d, F2, K2, M (26));
      R (d, e, a, b, c, F2, K2, M (27));
      R (c, d, e, a, b, F2, K2, M (28));
      R (b, c, d, e, a, F2, K2, M (29));
      R (a, b, c, d, e, F2, K2, M (30));
      R (e, a, b, c, d, F2, K2, M (31));
      R (d, e, a, b, c, F2, K2, M (32));
      R (c, d, e, a, b, F2, K2, M (33));
      R (b, c, d, e, a, F2, K2, M (34));
      R (a, b, c, d, e, F2, K2, M (35));
      R (e, a, b, c, d, F2, K2, M (36));
      R (d, e, a, b, c, F2, K2, M (37));
      R (c, d, e, a, b, F2, K2, M (38));
      R (b, c, d, e, a, F2, K2, M (39));
      R (a, b, c, d, e, F3, K3, M (40));
      R (e, a, b, c, d, F3, K3, M (41));
      R (d, e, a, b, c, F3, K3, M (42));
      R (c, d, e, a, b, F3, K3, M (43));
      R (b, c, d, e, a, F3, K3, M (44));
      R (a, b, c, d, e, F3, K3, M (45));
      R (e, a, b, c, d, F3, K3, M (46));
      R (d, e, a, b, c, F3, K3, M (47));
      R (c, d, e, a, b, F3, K3, M (48));
      R (b, c, d, e, a, F3, K3, M (49));
      R (a, b, c, d, e, F3, K3, M (50));
      R (e, a, b, c, d, F3, K3, M (51));
      R (d, e, a, b, c, F3, K3, M (52));
      R (c, d, e, a, b, F3, K3, M (53));
      R (b, c, d, e, a, F3, K3, M (54));
      R (a, b, c, d, e, F3, K3, M (55));
      R (e, a, b, c, d, F3, K3, M (56));
      R (d, e, a, b, c, F3, K3, M (57));
      R (c, d, e, a, b, F3, K3, M (58));
      R (b, c, d, e, a, F3, K3, M (59));
      R (a, b, c, d, e, F4, K4, M (60));
      R (e, a, b, c, d, F4, K4, M (61));
      R (d, e, a, b, c, F4, K4, M (62));
      R (c, d, e, a, b, F4, K4, M (63));
      R (b, c, d, e, a, F4, K4, M (64));
      R (a, b, c, d, e, F4, K4, M (65));
      R (e, a, b, c, d, F4, K4, M (66));
      R (d, e, a, b, c, F4, K4, M (67));
      R (c, d, e, a, b, F4, K4, M (68));
      R (b, c, d, e, a, F4, K4, M (69));
      R (a, b, c, d, e, F4, K4, M (70));
      R (e, a, b, c, d, F4, K4, M (71));
      R (d, e, a, b, c, F4, K4, M (72));
      R (c, d, e, a, b, F4, K4, M (73));
      R (b, c, d, e, a, F4, K4, M (74));
      R (a, b, c, d, e, F4, K4, M (75));
      R (e, a, b, c, d, F4, K4, M (76));
      R (d, e, a, b, c, F4, K4, M (77));
      R (c, d, e, a, b, F4, K4, M (78));
      R (b, c, d, e, a, F4, K4, M (79));

      W[0] = opad_A + a;
      W[1] = opad_B + b;
      W[2] = opad_C + c;
      W[3] = opad_D + d;
      W[4] = opad_E + e;

      pmk0 ^= W[0];
      pmk1 ^= W[1];
      pmk2 ^= W[2];
      pmk3 ^= W[3];
      pmk4 ^= W[4];

    }				// for

  pmk_out0 = ENDIAN (pmk0);
  pmk_out1 = ENDIAN (pmk1);
  pmk_out2 = ENDIAN (pmk2);
  pmk_out3 = ENDIAN (pmk3);
  pmk_out4 = ENDIAN (pmk4);

}
